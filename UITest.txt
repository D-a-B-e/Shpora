package com.example.pr13

import android.view.View
import android.widget.Adapter
import androidx.recyclerview.widget.RecyclerView
import androidx.test.espresso.Espresso.onView
import androidx.test.espresso.action.ViewActions
import androidx.test.espresso.action.ViewActions.typeText
import androidx.test.espresso.assertion.ViewAssertions
import androidx.test.espresso.assertion.ViewAssertions.matches
import androidx.test.espresso.contrib.RecyclerViewActions
import androidx.test.espresso.matcher.BoundedMatcher
import androidx.test.espresso.matcher.RootMatchers
import androidx.test.espresso.matcher.ViewMatchers
import androidx.test.espresso.matcher.ViewMatchers.withId
import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.ext.junit.runners.AndroidJUnit4
import androidx.test.rule.ActivityTestRule
import org.hamcrest.Description
import org.hamcrest.Matcher
import org.hamcrest.Matchers


import org.junit.Test
import org.junit.runner.RunWith

import org.junit.Assert.*
import org.junit.Rule
import java.util.*
import kotlin.jvm.Throws


/**
 * Instrumented test, which will execute on an Android device.
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */

fun test (newton: Newton): Matcher<View>{
    return object : BoundedMatcher<View, RecyclerView>(RecyclerView::class.java) {
        override fun describeTo(description: Description?) {
            description?.appendText("with Newton ${newton.expression}, ${newton.operation}, ${newton.result}")
        }

        override fun matchesSafely(item: RecyclerView?): Boolean {
            val itemStorageFirst = (item?.adapter as Adapter).getItem(1)
            val itemStorageSecond = (item?.adapter as Adapter).getItem(2)
            val itemStorageThird = (item?.adapter as Adapter).getItem(3)
            if (itemStorageFirst!= null && itemStorageSecond != null && itemStorageThird!= null)
                return true
            return false
        }
    }
}
@RunWith(AndroidJUnit4::class)
class ExampleInstrumentedTest {
    @Test
    fun useAppContext(){
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        assertEquals("com.example.pr13", appContext.packageName)
    }
    @get: Rule
    val activityRule = ActivityTestRule(MainActivity::class.java)
    @Test
    fun testOne(){
        onView(withId(R.id.Operation)).perform(ViewActions.typeText("derive"))
        onView(withId(R.id.Value)).perform(ViewActions.typeText("x*(x+2)"))

        val newton = Newton("derive", "x*(x 2)","4 x")
        Thread.sleep(10000)
        onView(withId(R.id.LoadButton)).check(matches(test(newton)))
    }

    @Test
    @Throws(InterruptedException::class)
    fun testVisibilityRecyclerView() {
        Thread.sleep(1000)
        onView(ViewMatchers.withId(R.id.recycler_view_data_nager))
            .inRoot(
                RootMatchers.withDecorView(
                    Matchers.`is`(
                        activityRule.activity.window.decorView
                    )
                )
            )
            .check(ViewAssertions.matches(ViewMatchers.isDisplayed()))
    }
}
